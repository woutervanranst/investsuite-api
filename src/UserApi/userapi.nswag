{
  "runtime": "Net70",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "openapi: 3.1.0\r\nx-stoplight:\r\n  id: 807clewcjwj8s\r\ninfo:\r\n  title: user-api\r\n  version: '1.0'\r\nservers:\r\n  - url: 'http://localhost:3000'\r\npaths:\r\n  '/users/{userId}':\r\n    parameters:\r\n      - schema:\r\n          type: integer\r\n        name: userId\r\n        in: path\r\n        required: true\r\n        description: Id of an existing user.\r\n    get:\r\n      summary: Get User Info by User ID\r\n      tags: []\r\n      responses:\r\n        '200':\r\n          description: User Found\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n              examples:\r\n                Get User Alice Smith:\r\n                  value:\r\n                    id: 142\r\n                    firstName: Alice\r\n                    lastName: Smith\r\n                    email: alice.smith@gmail.com\r\n                    dateOfBirth: '1997-10-31'\r\n                    emailVerified: true\r\n                    signUpDate: '2019-08-24'\r\n        '404':\r\n          description: User Not Found\r\n      operationId: get-users-userId\r\n      description: Retrieve the information of the user with the matching user ID.\r\n      x-stoplight:\r\n        id: xn9js0porvkxo\r\n    patch:\r\n      summary: Update User Information\r\n      operationId: patch-users-userId\r\n      responses:\r\n        '200':\r\n          description: User Updated\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n              examples:\r\n                Updated User Rebecca Baker:\r\n                  value:\r\n                    id: 13\r\n                    firstName: Rebecca\r\n                    lastName: Baker\r\n                    email: rebecca@gmail.com\r\n                    dateOfBirth: '1985-10-02'\r\n                    emailVerified: false\r\n                    createDate: '2019-08-24'\r\n        '404':\r\n          description: User Not Found\r\n        '409':\r\n          description: Email Already Taken\r\n      description: Update the information of an existing user.\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n                email:\r\n                  type: string\r\n                  description: 'If a new email is given, the user''s email verified property will be set to false.'\r\n                dateOfBirth:\r\n                  type: string\r\n            examples:\r\n              Update First Name:\r\n                value:\r\n                  firstName: Rebecca\r\n              Update Email:\r\n                value:\r\n                  email: rebecca@gmail.com\r\n              Update Last Name & Date of Birth:\r\n                value:\r\n                  lastName: Baker\r\n                  dateOfBirth: '1985-10-02'\r\n        description: Patch user properties to update.\r\n      x-stoplight:\r\n        id: 551zsj3hesdn1\r\n  /user:\r\n    post:\r\n      summary: Create New User\r\n      operationId: post-user\r\n      responses:\r\n        '200':\r\n          description: User Created\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n              examples:\r\n                New User Bob Fellow:\r\n                  value:\r\n                    id: 12\r\n                    firstName: Bob\r\n                    lastName: Fellow\r\n                    email: bob.fellow@gmail.com\r\n                    dateOfBirth: '1996-08-24'\r\n                    emailVerified: false\r\n                    createDate: '2020-11-18'\r\n        '400':\r\n          description: Missing Required Information\r\n        '409':\r\n          description: Email Already Taken\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n                email:\r\n                  type: string\r\n                dateOfBirth:\r\n                  type: string\r\n                  format: date\r\n              required:\r\n                - firstName\r\n                - lastName\r\n                - email\r\n                - dateOfBirth\r\n            examples:\r\n              Create User Bob Fellow:\r\n                value:\r\n                  firstName: Bob\r\n                  lastName: Fellow\r\n                  email: bob.fellow@gmail.com\r\n                  dateOfBirth: '1996-08-24'\r\n        description: Post the necessary fields for the API to create a new user.\r\n      description: Create a new user.\r\n      x-stoplight:\r\n        id: u7802yhgpoyoi\r\n  '/users/{userId}/exists':\r\n    parameters:\r\n      - schema:\r\n          type: string\r\n        name: userId\r\n        in: path\r\n        required: true\r\n    get:\r\n      summary: Your GET endpoint\r\n      tags: []\r\n      responses:\r\n        '204':\r\n          description: No Content\r\n        '404':\r\n          description: Not Found\r\n      operationId: get-users-userId-exists\r\n      x-stoplight:\r\n        id: ngevk2s29qyhf\r\ncomponents:\r\n  schemas:\r\n    User:\r\n      title: User\r\n      type: object\r\n      description: ''\r\n      examples:\r\n        - id: 142\r\n          firstName: Alice\r\n          lastName: Smith\r\n          email: alice.smith@gmail.com\r\n          dateOfBirth: '1997-10-31'\r\n          emailVerified: true\r\n          signUpDate: '2019-08-24'\r\n      properties:\r\n        id:\r\n          type: integer\r\n          description: Unique identifier for the given user.\r\n          x-stoplight:\r\n            id: q6invr6eh7xi7\r\n        firstName:\r\n          type: string\r\n          x-stoplight:\r\n            id: 66rat8vxkjdcz\r\n        lastName:\r\n          type: string\r\n          x-stoplight:\r\n            id: hf0faoig04o7h\r\n        email:\r\n          type: string\r\n          format: email\r\n          x-stoplight:\r\n            id: wo7mgwjtn1zqm\r\n        dateOfBirth:\r\n          type: string\r\n          format: date\r\n          example: '1997-10-31'\r\n          x-stoplight:\r\n            id: 35kly88cec8nk\r\n        emailVerified:\r\n          type: boolean\r\n          description: Set to true if the user's email has been verified.\r\n          x-stoplight:\r\n            id: pyg7u07pumxy0\r\n        createDate:\r\n          type: string\r\n          format: date\r\n          description: The date that the user was created.\r\n          x-stoplight:\r\n            id: v6hwbxjod5n5h\r\n      required:\r\n        - id\r\n        - firstName\r\n        - lastName\r\n        - email\r\n        - emailVerified\r\n      x-stoplight:\r\n        id: joc58ip4trqa5\r\n",
      "url": "http://redocly.github.io/redoc/openapi.yaml",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpController": {
      "controllerBaseClass": null,
      "controllerStyle": "Abstract",
      "controllerTarget": "AspNetCore",
      "useCancellationToken": false,
      "useActionResultType": false,
      "generateModelValidationAttributes": false,
      "routeNamingStrategy": "None",
      "basePath": null,
      "className": "{controller}",
      "operationGenerationMode": "MultipleClientsFromOperationId",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": false,
      "generateJsonMethods": false,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "UserApi.Controllers",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.List",
      "arrayInstanceType": "System.Collections.Generic.List",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "NewtonsoftJson",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "Controllers/UsersController.cs",
      "newLineBehavior": "Auto"
    }
  }
}